"""initial

Revision ID: 06def8c6c1c0
Revises:
Create Date: 2025-08-23 00:49:47.598820

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "06def8c6c1c0"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "evaluation_jobs",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "QUEUED",
                "STARTING",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "CANCELLED",
                "TIMEOUT",
                name="evaluation_status",
                native_enum=False,
            ),
            server_default="queued",
            nullable=False,
        ),
        sa.Column("container_id", sa.String(length=128), nullable=True),
        sa.Column("ray_worker_id", sa.String(length=128), nullable=True),
        sa.Column("max_retries", sa.Integer(), server_default="3", nullable=False),
        sa.Column("retry_count", sa.Integer(), server_default="0", nullable=False),
        sa.Column("random_seed", sa.Integer(), nullable=True),
        sa.Column("eval_start", sa.DateTime(timezone=True), nullable=True),
        sa.Column("eval_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column("logs_path", sa.Text(), nullable=False),
        sa.Column("max_memory_mb", sa.Integer(), nullable=True),
        sa.Column("max_cpu_percent", sa.Float(), nullable=True),
        sa.Column("submission_id", sa.BigInteger(), nullable=False),
        sa.Column("miner_hotkey", sa.String(length=48), nullable=False),
        sa.Column("hf_repo_id", sa.String(length=256), nullable=False),
        sa.Column("env_provider", sa.String(length=64), nullable=False),
        sa.Column("env_name", sa.String(length=128), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "eval_end IS NULL OR eval_start IS NULL OR eval_end >= eval_start",
            name="ck_eval_times_ordered",
        ),
        sa.CheckConstraint(
            "max_cpu_percent IS NULL OR (max_cpu_percent >= 0 AND max_cpu_percent <= 100)",
            name="ck_cpu_percent_range",
        ),
        sa.CheckConstraint(
            "max_memory_mb IS NULL OR max_memory_mb > 0", name="ck_memory_positive"
        ),
        sa.CheckConstraint("max_retries >= 0", name="ck_max_retries_non_negative"),
        sa.CheckConstraint("retry_count <= max_retries", name="ck_retry_within_max"),
        sa.CheckConstraint("retry_count >= 0", name="ck_retry_count_non_negative"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "submission_id", "miner_hotkey", "env_name", name="uq_submission_miner_env"
        ),
    )
    op.create_index(
        "ix_eval_jobs_active",
        "evaluation_jobs",
        ["status", "eval_start"],
        unique=False,
        postgresql_where=sa.text("status IN ('starting', 'running')"),
    )
    op.create_index(
        "ix_eval_jobs_miner_env",
        "evaluation_jobs",
        ["miner_hotkey", "env_name"],
        unique=False,
    )
    op.create_index(
        "ix_eval_jobs_recent_completed",
        "evaluation_jobs",
        ["status", "eval_end"],
        unique=False,
        postgresql_where=sa.text("status = 'completed'"),
    )
    op.create_index(
        "ix_eval_jobs_status_created",
        "evaluation_jobs",
        ["status", "created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_container_id"),
        "evaluation_jobs",
        ["container_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_created_at"),
        "evaluation_jobs",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_env_name"),
        "evaluation_jobs",
        ["env_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_eval_end"),
        "evaluation_jobs",
        ["eval_end"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_eval_start"),
        "evaluation_jobs",
        ["eval_start"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_hf_repo_id"),
        "evaluation_jobs",
        ["hf_repo_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_miner_hotkey"),
        "evaluation_jobs",
        ["miner_hotkey"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_ray_worker_id"),
        "evaluation_jobs",
        ["ray_worker_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_jobs_status"), "evaluation_jobs", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_evaluation_jobs_submission_id"),
        "evaluation_jobs",
        ["submission_id"],
        unique=False,
    )
    op.create_table(
        "evaluation_results",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("evaluation_id", sa.BigInteger(), nullable=False),
        sa.Column("total_episodes", sa.Integer(), nullable=False),
        sa.Column(
            "successful_episodes", sa.Integer(), server_default="0", nullable=False
        ),
        sa.Column("failed_episodes", sa.Integer(), server_default="0", nullable=False),
        sa.Column("success_rate", sa.Float(), server_default="0.0", nullable=False),
        sa.Column("total_reward", sa.Float(), nullable=True),
        sa.Column("avg_reward", sa.Float(), nullable=True),
        sa.Column("min_reward", sa.Float(), nullable=True),
        sa.Column("max_reward", sa.Float(), nullable=True),
        sa.Column("std_reward", sa.Float(), nullable=True),
        sa.Column("median_reward", sa.Float(), nullable=True),
        sa.Column("total_steps", sa.Integer(), nullable=True),
        sa.Column("avg_steps_per_episode", sa.Float(), nullable=True),
        sa.Column("max_steps_per_episode", sa.Integer(), nullable=True),
        sa.Column("avg_episode_duration_seconds", sa.Float(), nullable=True),
        sa.Column("total_computation_time_seconds", sa.Float(), nullable=True),
        sa.Column(
            "computed_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "avg_steps_per_episode IS NULL OR avg_steps_per_episode >= 0",
            name="ck_avg_steps_non_negative",
        ),
        sa.CheckConstraint(
            "failed_episodes >= 0", name="ck_failed_episodes_non_negative"
        ),
        sa.CheckConstraint(
            "success_rate >= 0.0 AND success_rate <= 1.0", name="ck_success_rate_range"
        ),
        sa.CheckConstraint(
            "successful_episodes + failed_episodes <= total_episodes",
            name="ck_episode_counts_consistent",
        ),
        sa.CheckConstraint(
            "successful_episodes >= 0", name="ck_successful_episodes_non_negative"
        ),
        sa.CheckConstraint("total_episodes > 0", name="ck_total_episodes_positive"),
        sa.CheckConstraint(
            "total_steps IS NULL OR total_steps >= 0",
            name="ck_total_steps_non_negative",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_eval_results_avg_reward", "evaluation_results", ["avg_reward"], unique=False
    )
    op.create_index(
        "ix_eval_results_computed_at",
        "evaluation_results",
        ["computed_at"],
        unique=False,
    )
    op.create_index(
        "ix_eval_results_success_rate",
        "evaluation_results",
        ["success_rate"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_results_created_at"),
        "evaluation_results",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_evaluation_results_evaluation_id"),
        "evaluation_results",
        ["evaluation_id"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_evaluation_results_evaluation_id"), table_name="evaluation_results"
    )
    op.drop_index(
        op.f("ix_evaluation_results_created_at"), table_name="evaluation_results"
    )
    op.drop_index("ix_eval_results_success_rate", table_name="evaluation_results")
    op.drop_index("ix_eval_results_computed_at", table_name="evaluation_results")
    op.drop_index("ix_eval_results_avg_reward", table_name="evaluation_results")
    op.drop_table("evaluation_results")
    op.drop_index(
        op.f("ix_evaluation_jobs_submission_id"), table_name="evaluation_jobs"
    )
    op.drop_index(op.f("ix_evaluation_jobs_status"), table_name="evaluation_jobs")
    op.drop_index(
        op.f("ix_evaluation_jobs_ray_worker_id"), table_name="evaluation_jobs"
    )
    op.drop_index(op.f("ix_evaluation_jobs_miner_hotkey"), table_name="evaluation_jobs")
    op.drop_index(op.f("ix_evaluation_jobs_hf_repo_id"), table_name="evaluation_jobs")
    op.drop_index(op.f("ix_evaluation_jobs_eval_start"), table_name="evaluation_jobs")
    op.drop_index(op.f("ix_evaluation_jobs_eval_end"), table_name="evaluation_jobs")
    op.drop_index(op.f("ix_evaluation_jobs_env_name"), table_name="evaluation_jobs")
    op.drop_index(op.f("ix_evaluation_jobs_created_at"), table_name="evaluation_jobs")
    op.drop_index(op.f("ix_evaluation_jobs_container_id"), table_name="evaluation_jobs")
    op.drop_index("ix_eval_jobs_status_created", table_name="evaluation_jobs")
    op.drop_index(
        "ix_eval_jobs_recent_completed",
        table_name="evaluation_jobs",
        postgresql_where=sa.text("status = 'completed'"),
    )
    op.drop_index("ix_eval_jobs_miner_env", table_name="evaluation_jobs")
    op.drop_index(
        "ix_eval_jobs_active",
        table_name="evaluation_jobs",
        postgresql_where=sa.text("status IN ('starting', 'running')"),
    )
    op.drop_table("evaluation_jobs")
    # ### end Alembic commands ###
